<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NPM 经验之谈</title>
      <link href="/npm-experience/"/>
      <url>/npm-experience/</url>
      
        <content type="html"><![CDATA[<h2 id="全局-npm"><a href="#全局-npm" class="headerlink" title="全局 npm"></a>全局 npm</h2><ul><li>npm 的全局安装包位置: <code>C:\Users\youngjuning\AppData\Roaming\npm</code></li><li>npm 的全局 cache 位置: <code>C:\Users\youngjuning\AppData\Roaming\npm-cache</code></li></ul><h2 id="npm-版本升级"><a href="#npm-版本升级" class="headerlink" title="npm 版本升级"></a>npm 版本升级</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install npm@latest -g</span><br></pre></td></tr></table></figure><h2 id="Node-js-版本升级"><a href="#Node-js-版本升级" class="headerlink" title="Node.js 版本升级"></a>Node.js 版本升级</h2><p><a href="http://ksria.com/gnvm/" target="_blank" rel="noopener">GNVM</a>: 使用 Go 语言编写的 Node.js 多版本管理器</p><h2 id="代理管理"><a href="#代理管理" class="headerlink" title="代理管理"></a>代理管理</h2><p><a href="https://github.com/Pana/nrm" target="_blank" rel="noopener">nrm</a>: NPM registry 管理工具</p><p>配置后可通过下面方式来验证是否成功:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config get registry</span><br></pre></td></tr></table></figure><h2 id="开发工具"><a href="#开发工具" class="headerlink" title="开发工具"></a>开发工具</h2><ul><li><a href="https://github.com/GoogleChromeLabs/ndb" target="_blank" rel="noopener">ndb</a>: ndb 是针对 Node.js 的改进调试体验，由 Chrome DevTools 启用</li><li><a href="https://github.com/remy/nodemon" target="_blank" rel="noopener">nodemon</a>: nodemon 用来监视 node.js 应用程序中的任何更改并自动重启服务,非常适合用在开发环境中。</li></ul><h2 id="守护进程"><a href="#守护进程" class="headerlink" title="守护进程"></a>守护进程</h2><ul><li><a href="https://github.com/foreverjs/forever" target="_blank" rel="noopener">forever</a>: forever 是一个简单的命令式 nodejs 的守护进程，能够启动，停止，重启 App 应用</li><li><a href="https://github.com/Unitech/pm2" target="_blank" rel="noopener">pm2</a>: 内置负载均衡的 Node.js 生产环境进程管理器</li></ul><h2 id="发布一个公有的-Org-作用域包"><a href="#发布一个公有的-Org-作用域包" class="headerlink" title="发布一个公有的 Org 作用域包"></a>发布一个公有的 Org 作用域包</h2><blockquote><p><a href="http://t.cn/AiKJxoPo" target="_blank" rel="noopener">Creating and publishing an Org scoped package</a></p></blockquote><h2 id="解决一些模块下载慢问题"><a href="#解决一些模块下载慢问题" class="headerlink" title="解决一些模块下载慢问题"></a>解决一些模块下载慢问题</h2><p>###</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载node源码加速：</span></span><br><span class="line">$ npm config <span class="built_in">set</span> registry https://npm.taobao.org/mirrors/node</span><br><span class="line"><span class="comment"># 下载node源码加速:</span></span><br><span class="line">$ npm config <span class="built_in">set</span> disturl https://npm.taobao.org/mirrors/node</span><br><span class="line"><span class="comment"># 然后将electron包下载地址注册位淘宝的镜像:</span></span><br><span class="line">$ npm config <span class="built_in">set</span> ELECTRON_MIRROR https://npm.taobao.org/mirrors/electron/</span><br></pre></td></tr></table></figure><h3 id="node-sass"><a href="#node-sass" class="headerlink" title="node-sass"></a>node-sass</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm config <span class="built_in">set</span> sass-binary-site http://npm.taobao.org/mirrors/node-sass</span><br></pre></td></tr></table></figure><h3 id="新建包"><a href="#新建包" class="headerlink" title="新建包"></a>新建包</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir /path/to/package/directory</span><br><span class="line">$  npm init --scope=&lt;your_org_name&gt;</span><br></pre></td></tr></table></figure><h3 id="发布包"><a href="#发布包" class="headerlink" title="发布包"></a>发布包</h3><p>将 Org 作用域包发布为 public，使用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm publish --access public</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node.js </category>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验之谈 </tag>
            
            <tag> 未完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>travis-ci 配置构建通知</title>
      <link href="/travis-ci-configuring-build-notifications/"/>
      <url>/travis-ci-configuring-build-notifications/</url>
      
        <content type="html"><![CDATA[<p>Travis CI 提供的是持续集成服务（Continuous Integration，简称 CI）。它绑定 Github 上面的项目，只要有新的代码，就会自动抓取。然后，提供一个运行环境，执行测试，完成构建，还能部署到服务器。本文主要讲述如何配置构建通知。</p><blockquote><p>注意：如果你依然使用 <a href="http://www.travis-ci.org/" target="_blank" rel="noopener">travis-ci.org</a>，在本文中的所有命令中你需要使用 <code>--org</code> 代替 <code>--com</code>。</p></blockquote><p>Travis CI 可以通过电子邮件，IRC，聊天或自定义 webhook 通知您有关构建结果的信息。</p><h2 id="默认配置"><a href="#默认配置" class="headerlink" title="默认配置"></a>默认配置</h2><p>默认地，email 通知被发送到 <code>committer</code> 和 <code>commit author</code>，当他们是这个仓库的成员，并且他们拥有：</p><ul><li>公开仓库的 <code>push</code> 或者 <code>admin</code> 权限</li><li>私有仓库的 <code>pull</code>、<code>push</code> 或者 <code>admin</code> 权限</li></ul><p>在给定分支上发送电子邮件:</p><ul><li>构建失败或持续构建失败</li><li>以前失败的构建被修复</li></ul><p>欲知详细信息，请阅读 <a href="./#默认邮箱地址">默认邮箱地址</a>、<a href="./#更改电子邮件地址">更改电子邮件地址</a> 或 <a href="./#故障排除电子邮件通知">故障排除电子邮件通知</a></p><p>如果你添加了另外一个通知渠道，比如 HipChat 或者 Slack，默认情况下，将会在每一次构建时发送通知。</p><h2 id="修改通知频率"><a href="#修改通知频率" class="headerlink" title="修改通知频率"></a>修改通知频率</h2><p>你可以通过设置 <code>on_success</code> 或 <code>on_failure</code> 标志来更改任何通知渠道的通知条件：</p><ul><li><code>always</code>: 总是发送通知</li><li><code>never</code>: 从不发送通知</li><li><code>change</code>: 当构建状态发生变化时发送通知</li></ul><p>例如，要始终在成功构建时发送 slack 通知，在失败时始终给所有渠道发送通知：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  on_failure:</span> <span class="string">always</span></span><br><span class="line"><span class="attr">  slack:</span></span><br><span class="line"><span class="attr">    on_success:</span> <span class="string">always</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：这些 webhooks 被期待放在构建的最后。并且构建时的环境变量在这部分不可用。目前无法将通知限制为特定分支</p></blockquote><h2 id="配置邮件通知"><a href="#配置邮件通知" class="headerlink" title="配置邮件通知"></a>配置邮件通知</h2><p>指定将通知构建结果的收件人：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  email:</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">one@example.com</span></span><br><span class="line"><span class="bullet">    -</span> <span class="string">other@example.com</span></span><br></pre></td></tr></table></figure><p>完全关闭邮件通知</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  email:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>指定您希望<a href="./#修改通知频率">何时收到通知</a>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">notifications:</span></span><br><span class="line"><span class="attr">  email:</span></span><br><span class="line"><span class="attr">    recipients:</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">one@example.com</span></span><br><span class="line"><span class="bullet">      -</span> <span class="string">other@example.com</span></span><br><span class="line"><span class="attr">    on_success:</span> <span class="string">never</span> <span class="comment"># default: change</span></span><br><span class="line"><span class="attr">    on_failure:</span> <span class="string">always</span> <span class="comment"># default: always</span></span><br></pre></td></tr></table></figure><p><code>Pull Request</code> 构建不会触发邮件通知</p><h2 id="默认邮箱地址"><a href="#默认邮箱地址" class="headerlink" title="默认邮箱地址"></a>默认邮箱地址</h2><ul><li style="list-style: none"><input type="checkbox"> 待完成</li></ul><h2 id="更改电子邮件地址"><a href="#更改电子邮件地址" class="headerlink" title="更改电子邮件地址"></a>更改电子邮件地址</h2><ul><li style="list-style: none"><input type="checkbox"> 待完成</li></ul><h2 id="故障排除电子邮件通知"><a href="#故障排除电子邮件通知" class="headerlink" title="故障排除电子邮件通知"></a>故障排除电子邮件通知</h2><ul><li style="list-style: none"><input type="checkbox"> 待完成</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li><a href="http://t.cn/AiKfI9jx" target="_blank" rel="noopener">Configuring Build Notifications</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 持续集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 未完成 </tag>
            
            <tag> travis-ci </tag>
            
            <tag> ci </tag>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>全面使用TypeScript提高React Native开发效率</title>
      <link href="/the-best-practice-for-typescript-react-native/"/>
      <url>/the-best-practice-for-typescript-react-native/</url>
      
        <content type="html"><![CDATA[<p>全面使用 TypeScript 提高 React Native 开发效率</p>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 未完成 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>愉快地使用TypeScript开发React Native应用</title>
      <link href="/use-typescript-develop-react-native/"/>
      <url>/use-typescript-develop-react-native/</url>
      
        <content type="html"><![CDATA[<p>从 <a href="http://t.cn/EKvlU2T" target="_blank" rel="noopener">React Native 0.57</a> 版本开始，我们终于可以直接使用 TypeScript 开发，不需要任何额外的配置。本文主要介绍如何使用 TypeScript 优雅地开发 React Native 应用。</p><h1 id="一、初始化项目"><a href="#一、初始化项目" class="headerlink" title="一、初始化项目"></a>一、初始化项目</h1><blockquote><p>初始化项目之前，请确保已经按照 <a href="http://t.cn/RmXTnUP" target="_blank" rel="noopener">React Native 中文网</a> 的搭建开发环境文档完成了环境搭建</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ react-native init AwesomeProject</span><br></pre></td></tr></table></figure><blockquote><p>注意: 入口文件 <code>index.js</code> 需要保留，其他文件都可以使用 <code>.ts</code> 或 <code>.tsx</code> 后缀。</p></blockquote><h1 id="二、TypeScript-编译器"><a href="#二、TypeScript-编译器" class="headerlink" title="二、TypeScript 编译器"></a>二、TypeScript 编译器</h1><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yarn global add typescript</span><br><span class="line">$ yarn add -D typescript @types/react @types/react-native</span><br></pre></td></tr></table></figure><h1 id="三、配置-tsconfig-json"><a href="#三、配置-tsconfig-json" class="headerlink" title="三、配置 tsconfig.json"></a>三、配置 tsconfig.json</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ tsc --init --pretty --target esnext --allowJs --checkJs --jsx react-native --allowSyntheticDefaultImports --experimentalDecorators --emitDecoratorMetadata</span><br></pre></td></tr></table></figure><blockquote><p>注意：注意多余的注释可能会不兼容，需要移除，详细文档可查阅 <a href="http://t.cn/EK2CuWP" target="_blank" rel="noopener">编译选项</a>。</p></blockquote><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="tsconfig-json"><a href="#tsconfig-json" class="headerlink" title="tsconfig.json"></a>tsconfig.json</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"esnext"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"allowJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"checkJs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>, <span class="string">"**/*.js"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>解释:</strong></p><ul><li><code>target</code>: 指定 ECMAScript 目标版本 “ES3”（默认），”ES5”，”ES6”/“ES2015”，”ES2016”，”ES2017”，”ES2018”, “ES2019” 或 “ESNext”。</li><li><code>mode</code>: 指定生成哪个模块系统代码：”None”，”CommonJS”，”AMD”，”System”，”UMD”，”ES6”， “ES2015” 或 “ESNext”。</li><li><code>allowJs</code>: 允许编译 javascript 文件。</li><li><code>checkJs</code>: 在 <code>.js</code> 文件中报告错误。与 <code>--allowJs</code> 配合使用。</li><li><code>jsx</code>: 在 .tsx 文件里支持 JSX： “react”、”react-native”或 “preserve”。查看 <a href="http://t.cn/EK2hSmk" target="_blank" rel="noopener">JSX</a>。</li><li><code>strict</code>: 启用所有严格类型检查选项。启用 <code>--strict</code> 相当于启用 <code>--noImplicitAny</code>, <code>--noImplicitThis</code>, <code>--alwaysStrict</code>， <code>--strictNullChecks</code> 和 <code>--strictFunctionTypes</code> 和<code>--strictPropertyInitialization</code>。</li><li><code>allowSyntheticDefaultImports</code>: 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。</li><li><code>esModuleInterop</code>: TypeScript 与 Babel 采取了不同的方案，并且直到现在，还没出现真正地固定标准。 简单地说，如果你使用 Babel，Webpack 或 React Native，并期望与你以往使用地不同的导入行为，TypeScript 提供了该编译选项。</li><li><code>experimentalDecorators</code>: 启用实验性的 ES 装饰器。</li><li><code>给源码里的装饰器声明加上设计类型元数据。</code>: 给源码里的装饰器声明加上设计类型元数据。</li></ul><h1 id="四、EsLint-代码检测"><a href="#四、EsLint-代码检测" class="headerlink" title="四、EsLint 代码检测"></a>四、EsLint 代码检测</h1><p>Lint 工具用于检查代码的语法是否正确、风格是否符合要求。最新的工具 ESLint 不仅允许你自定义语法规则，还允许用户创造插件，改变默认的 JavaScript 语法，比如支持 ES6 和 JSX 的语法。</p><h2 id="VsCode-支持"><a href="#VsCode-支持" class="headerlink" title="VsCode 支持"></a>VsCode 支持</h2><h3 id="安装-ESLint-Plugin"><a href="#安装-ESLint-Plugin" class="headerlink" title="安装 ESLint Plugin"></a>安装 ESLint Plugin</h3><p><img src="https://i.loli.net/2019/05/12/5cd800f36779f.jpg" alt></p><h3 id="配置-ESLint-Plugin"><a href="#配置-ESLint-Plugin" class="headerlink" title="配置 ESLint Plugin"></a>配置 ESLint Plugin</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"eslint.validate"</span>: [</span><br><span class="line">    <span class="string">"javascript"</span>,</span><br><span class="line">    <span class="string">"javascriptreact"</span>,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"typescript"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"typescriptreact"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"vue"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"language"</span>: <span class="string">"html"</span>,</span><br><span class="line">      <span class="attr">"autoFix"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"eslint.autoFixOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>eslint.validate</code>：ESLint 插件默认只校验 javascript 和 javascriptreact，所以需要手动开启其他语言的校验支持</li><li><code>eslint.autoFixOnSave</code>: 开启保存时自动修复错误</li></ul><h2 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h2><blockquote><p>注意：配置之前请确保根目录下存在 <code>.eslintrc.js</code>。如果要指定忽略某些文件，可以使用 <code>.eslintignore</code> 文件（node_modules、bower_compnents 文件夹已经默认被忽略）</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D eslint eslint-config-airbnb eslint-plugin-jsx-a11y eslint-plugin-import eslint-plugin-react eslint-plugin-react-native @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-import-resolver-typescript</span><br></pre></td></tr></table></figure><ul><li><a href="https://cn.eslint.org/" target="_blank" rel="noopener">eslint</a>: 可组装的 JavaScript 和 JSX 检查工具</li><li><a href="http://t.cn/RKfLS6c" target="_blank" rel="noopener">eslint-config-airbnb</a>: 该软件包提供 Airbnb 的 <code>.eslintrc</code> 作为可扩展的共享配置</li><li><a href="http://t.cn/R9D22Jm" target="_blank" rel="noopener">eslint-plugin-jsx-a11y</a>: 用于 JSX 元素的可访问性规则的静态 AST 检查器。</li><li><a href="http://t.cn/ESs9ZxL" target="_blank" rel="noopener">eslint-plugin-import</a>: 此插件旨在支持 ES2015 +（ES6 +）导入/导出语法的 linting。</li><li><a href="http://t.cn/R9D22Jm" target="_blank" rel="noopener">eslint-plugin-react</a>: ESLint React 校验规则插件</li><li><a href="http://t.cn/EK2Hf83eslint-plugin-react-native" target="_blank" rel="noopener">eslint-plugin-react-native</a>: 针对 ESLint 的 React Native 特定 linting 规则</li><li><a href="http://t.cn/ESsqPWt" target="_blank" rel="noopener">@typescript-eslint/parser</a>: 将 TypeScript 转换为 ESTree，使 eslint 可以识别</li><li><a href="http://t.cn/ESsVcqc" target="_blank" rel="noopener">@typescript-eslint/eslint-plugin</a>: 一个包含一堆特定于 TypeScript 的 ESLint 规则的插件</li><li><a href="http://t.cn/EK2QgeN" target="_blank" rel="noopener">eslint-import-resolver-typescript</a>: 给 eslint-plugin-import 添加 typescript 支持的插件</li></ul><h3 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>.eslintrc.js:</strong></p><p>由于文件过长，这里不做展示，具体配置<a href="http://t.cn/EoqF7WE" target="_blank" rel="noopener">请戳</a></p><p><strong>.eslintignore:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /node_modules/* and /bower_components/* ignored by default</span><br></pre></td></tr></table></figure><h1 id="五、Prettier-代码格式化"><a href="#五、Prettier-代码格式化" class="headerlink" title="五、Prettier 代码格式化"></a>五、Prettier 代码格式化</h1><p>ESLint 能够检测出代码中的潜在问题，提高代码质量，但是并不能完全统一代码风格。而 Prettier 在格式化代码方面具有更大优势。Prettier 扫描文件中的样式问题，并自动重新格式化代码，以确保缩进、间距、分号、单引号和双引号等遵循一致的规则。</p><h2 id="VsCode-支持-1"><a href="#VsCode-支持-1" class="headerlink" title="VsCode 支持"></a>VsCode 支持</h2><blockquote><p>如果你只是想要格式化你的 JS 或 TS 代码，你可以忽略这一部分</p></blockquote><h3 id="安装-Prettier-Plugin"><a href="#安装-Prettier-Plugin" class="headerlink" title="安装 Prettier Plugin"></a>安装 Prettier Plugin</h3><p><img src="https://i.loli.net/2019/05/12/5cd80379c9b41.jpg" alt></p><h3 id="配置-Prettier-Plugin"><a href="#配置-Prettier-Plugin" class="headerlink" title="配置 Prettier Plugin"></a>配置 Prettier Plugin</h3><blockquote><p>注意：除了以下配置，建议你把其他格式化插件，比如 beautify 直接卸载，并配置 prettier 为默认格式化程序。</p></blockquote><ul><li><code>prettier.requireConfig</code>: 需要项目中存在一个 prettierconfig 文件才能运行 prettier</li><li><code>editor.formatOnSave</code>: 开启保存时自动格式化</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"prettier.requireConfig"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"editor.formatOnSave"</span>: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置规则:</strong></p><p><img src="https://i.loli.net/2019/05/12/5cd805ed333da.jpg" alt></p><h2 id="Prettier-与-ESLint-配合使用"><a href="#Prettier-与-ESLint-配合使用" class="headerlink" title="Prettier 与 ESLint 配合使用"></a>Prettier 与 ESLint 配合使用</h2><p>完成上一部分 VSCode 的支持，再配置一个 PrettierConfig 文件你就可以使用 Prettier 的功能了。但是当样式出问题时，编辑器并不会给你报错。更糟糕的是，ESLint 和 Prettier 在格式化规则方面存在一些冲突。幸运的是，Prettier 被设计为易于与 ESLint 集成，所以你可以轻松在项目中使两者，而无需担心冲突。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add prettier eslint-config-prettier eslint-plugin-prettier -D</span><br></pre></td></tr></table></figure><ul><li><a href="http://t.cn/R1kvfYq" target="_blank" rel="noopener">prettier</a>: 主 prettier 库</li><li><a href="http://t.cn/ESsWd0H" target="_blank" rel="noopener">eslint-config-prettier</a>: 关闭所有不必要或可能与 prettier 的规则冲突的 ESLint 规则。</li><li><a href="http://t.cn/ESslahh" target="_blank" rel="noopener">eslint-plugin-prettier</a>: 以 ESLint 插件的形式运行 prettier</li></ul><h3 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>.eslintrc.js:</strong></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  extends: [</span><br><span class="line"><span class="addition">+   'prettier',</span></span><br><span class="line"><span class="addition">+   'plugin:prettier/recommended',</span></span><br><span class="line"><span class="addition">+   'prettier/react',</span></span><br><span class="line"><span class="addition">+   'prettier/@typescript-eslint',</span></span><br><span class="line">  ],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>.eslintignore:</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># /node_modules/* and /bower_components/* ignored by default</span><br></pre></td></tr></table></figure><h3 id="prettierrc-js"><a href="#prettierrc-js" class="headerlink" title=".prettierrc.js"></a>.prettierrc.js</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  semi: <span class="literal">false</span>, <span class="comment">// 行位是否使用分号，默认为true</span></span><br><span class="line">  trailingComma: <span class="string">'es5'</span>, <span class="comment">// 是否使用尾逗号，有三个可选值"&lt;none|es5|all&gt;"</span></span><br><span class="line">  singleQuote: <span class="literal">true</span>, <span class="comment">// 字符串是否使用单引号，默认为false，使用双引号</span></span><br><span class="line">  printWidth: <span class="number">120</span>, <span class="comment">// 一行的字符数，如果超过会进行换行，默认为80</span></span><br><span class="line">  tabWidth: <span class="number">2</span>, <span class="comment">// 一个tab代表几个空格数</span></span><br><span class="line">  bracketSpacing: <span class="literal">true</span>, <span class="comment">// 对象大括号直接是否有空格，默认为true，效果：&#123; foo: bar &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="prettierinore"><a href="#prettierinore" class="headerlink" title=".prettierinore"></a>.prettierinore</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">**/node_modules/*</span><br></pre></td></tr></table></figure><h1 id="六、EditorConfig-跨编辑器配置统一"><a href="#六、EditorConfig-跨编辑器配置统一" class="headerlink" title="六、EditorConfig 跨编辑器配置统一"></a>六、EditorConfig 跨编辑器配置统一</h1><p>当多人共同开发一个项目的时候，往往会出现大家用不同编辑器的情况。就前端开发者来说，有人喜欢 Sublime，有人喜欢 Webstorm , 也有人喜欢 Atom，还有人喜欢 Vim，HBuilder 等等。各种不同编程语言的开发者喜欢各种不同的编辑器。EditorConfig 这个项目就是为了解决跨编辑器开发项目的代码风格统一问题的。</p><h2 id="VSCode-Plugin"><a href="#VSCode-Plugin" class="headerlink" title="VSCode Plugin"></a>VSCode Plugin</h2><p>安装完后不需要配置，直接在项目中添加配置文件即可。</p><p><img src="https://i.loli.net/2019/05/12/5cd82aae0c7c4.jpg" alt></p><h2 id="配置文件-3"><a href="#配置文件-3" class="headerlink" title="配置文件"></a>配置文件</h2><p><strong>.editorconfig:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># EditorConfig is awesome: http://EditorConfig.org</span><br><span class="line"></span><br><span class="line"># top-most EditorConfig file</span><br><span class="line">root = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"># Unix-style newlines with a newline ending every file</span><br><span class="line">[*]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = <span class="number">2</span></span><br><span class="line">end_of_line = lf</span><br><span class="line">charset = utf<span class="number">-8</span></span><br><span class="line">trim_trailing_whitespace = <span class="literal">true</span></span><br><span class="line">insert_final_newline = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">[*.gradle]</span><br><span class="line">indent_size = <span class="number">4</span></span><br><span class="line"></span><br><span class="line">[BUCK]</span><br><span class="line">indent_size = <span class="number">4</span></span><br></pre></td></tr></table></figure><h1 id="七、Git-pre-commit-Hook"><a href="#七、Git-pre-commit-Hook" class="headerlink" title="七、Git pre-commit Hook"></a>七、Git pre-commit Hook</h1><p><code>pre-commit</code>钩子在键入提交信息前运行。 它用于检查即将提交的快照，例如，检查是否有所遗漏，确保测试运行，以及核查代码。 如果该钩子以非零值退出，Git 将放弃此次提交，不过你可以用<code>git commit --no-verify</code>来绕过这个环节。 你可以利用该钩子，来检查代码风格是否一致（运行类似 lint 的程序）、尾随空白字符是否存在（自带的钩子就是这么做的），或新方法的文档是否适当。</p><h2 id="husky-轻松使用-Git-hooks"><a href="#husky-轻松使用-Git-hooks" class="headerlink" title="husky: 轻松使用 Git hooks"></a>husky: 轻松使用 Git hooks</h2><blockquote><p>Husky 能阻止坏的 <code>git commit</code>, <code>git push</code> 和更多的 💩</p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D husky</span><br></pre></td></tr></table></figure><h3 id="配置文件-4"><a href="#配置文件-4" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>.huskyrc.js:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  hooks: &#123;</span><br><span class="line">    <span class="string">'pre-commit'</span>: <span class="string">'node node_modules/eslint/bin/eslint.js --fix src/**/*.js'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意：测试发现直接运行 <code>eslint --fix</code> 使用的是全局的模块。</p></blockquote><h3 id="只使用-husky-的问题"><a href="#只使用-husky-的问题" class="headerlink" title="只使用 husky 的问题"></a>只使用 husky 的问题</h3><ul><li>性能问题：对整个项目运行一个 lint 进程很慢，而且 linting 结果可能无关紧要。</li><li>效率问题：遗留代码仓库上工作的同学很快会遇到新的问题，开启 Lint 初期，你可能会面临成千上万的 Lint Error 需要修复。部分同学对下面这个图可能并不陌生：只改了文件 A，但是文件 B、C、D 中也有大量错误。</li></ul><h2 id="lint-staged-husky-的好帮手"><a href="#lint-staged-husky-的好帮手" class="headerlink" title="lint-staged: husky 的好帮手"></a>lint-staged: husky 的好帮手</h2><blockquote><p>针对暂存的 git 文件运行 linters 并且不要让 💩 滑入你的代码库！对暂存区概念不熟悉的同学可以看下<a href="http://t.cn/EKqRqT8" target="_blank" rel="noopener">git-简明指南</a></p></blockquote><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D husky lint-staged</span><br></pre></td></tr></table></figure><ul><li>husky: 被用来添加一些 git 钩子，这里我们需要一个用 <code>pre-commit</code> 在每次 <code>git commit</code> 操作时执行 <code>lint-staged</code> 命令。</li><li>lint-staged: 可以对 git 暂存区文件(也就是你想要 commit 的文件)执行一些操作，这样做即提高了性能又提高了效率。</li></ul><h3 id="配置文件-5"><a href="#配置文件-5" class="headerlink" title="配置文件"></a>配置文件</h3><p><strong>.huskyrc.js:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  hooks: &#123;</span><br><span class="line">    <span class="string">'pre-commit'</span>: <span class="string">'lint-staged'</span>,</span><br><span class="line">    <span class="string">'**/*.&#123;md,json&#125;'</span>: [<span class="string">'prettier --write'</span>, <span class="string">'git add'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>lint-staged.config.js:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="string">'src/**/*.&#123;js,jsx,ts,tsx&#125;'</span>: [<span class="string">'eslint --fix'</span>, <span class="string">'git add'</span>],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="八、相对于根目录引入组件"><a href="#八、相对于根目录引入组件" class="headerlink" title="八、相对于根目录引入组件"></a>八、相对于根目录引入组件</h1><p>这部分不是必须的，配置也有些繁琐。这里我就只介绍下简单的配置，详细文档请请查阅 <a href="http://t.cn/EKGpjPF" target="_blank" rel="noopener">babel-plugin-root-import</a>。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D babel-plugin-root-import eslint-import-resolver-babel-plugin-root-import</span><br></pre></td></tr></table></figure><h2 id="配置文件-6"><a href="#配置文件-6" class="headerlink" title="配置文件"></a>配置文件</h2><p><strong>babel.config.js:</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  ...</span><br><span class="line">  plugins: [</span><br><span class="line">    [</span><br><span class="line">      <span class="string">'babel-plugin-root-import'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        rootPathSuffix: <span class="string">'src'</span>,</span><br><span class="line">        rootPathPrefix: <span class="string">'~'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  ],</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>.eslintrc.js</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  settings: &#123;</span><br><span class="line">    <span class="string">'import/resolver'</span>: &#123;</span><br><span class="line">      <span class="string">'babel-plugin-root-import'</span>: &#123;</span><br><span class="line">        rootPathSuffix: <span class="string">'src'</span>,</span><br><span class="line">        rootPathPrefix: <span class="string">'~'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>tsconfig.json:</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"baseUrl"</span>: <span class="string">"."</span>,</span><br><span class="line">    <span class="attr">"paths"</span>: &#123;</span><br><span class="line">      <span class="attr">"~/*"</span>: [<span class="string">"src/*"</span>]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="九、支持-jsx"><a href="#九、支持-jsx" class="headerlink" title="九、支持 .jsx"></a>九、支持 .jsx</h1><p>React Native 都已经内置支持 TypeScript 了，但是却不支持 <code>.jsx</code> 文件后缀。如果你想要使用 <code>.jsx</code> 开发，可以配置 <code>metro.config.js</code>:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  resolver: &#123;</span><br><span class="line">    sourceExts: [<span class="string">'ts'</span>, <span class="string">'tsx'</span>, <span class="string">'js'</span>, <span class="string">'jsx'</span>, <span class="string">'json'</span>, <span class="string">'mjs'</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="十、相关资料"><a href="#十、相关资料" class="headerlink" title="十、相关资料"></a>十、相关资料</h1><ul><li><a href="http://t.cn/EKLRSDv" target="_blank" rel="noopener">Using ESLint and Prettier in a TypeScript Project</a>: TypeScript、ESLint、Prettier、VSCode</li><li><a href="http://t.cn/EKLEN2O" target="_blank" rel="noopener">使用 ESLint + Prettier 简化代码 Review 过程</a>: Zeit Now、DevOps</li><li><a href="http://t.cn/EKLE22f" target="_blank" rel="noopener">用 Prettier 和 ESlint 来统一提交代码</a>: ESLint、Prettier、husky、lint-staged</li><li><a href="http://t.cn/RBxTDYi" target="_blank" rel="noopener">用 ESLint 和 Prettier 写出高质量代码</a>：ESLint、Prettier、husky、lint-staged</li><li><a href="http://t.cn/RBsXRgG" target="_blank" rel="noopener">使用 ESLint+Prettier 来统一前端代码风格</a>：ESLint、Prettier</li><li><a href="http://t.cn/EKqu03I" target="_blank" rel="noopener">使用 ESLint ＆ Prettier 美化 Vue 代码</a>：Vue、ESLint、Prettier、husky、lint-staged、填坑</li><li><a href="http://t.cn/RSvWkOI" target="_blank" rel="noopener">用 husky 和 lint-staged 构建超溜的代码检查工作流</a>: husky、lint-staged</li></ul>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESLint </tag>
            
            <tag> Prettier </tag>
            
            <tag> EditorConfig </tag>
            
            <tag> airbnb </tag>
            
            <tag> husky </tag>
            
            <tag> pre-commit </tag>
            
            <tag> lint-staged </tag>
            
            <tag> JSX </tag>
            
            <tag> root-import </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>愉快地使用TypeScript开发React Native插件</title>
      <link href="/use-typescript-develop-react-native-plugin/"/>
      <url>/use-typescript-develop-react-native-plugin/</url>
      
        <content type="html"><![CDATA[<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><blockquote><p>开始配置之前，请确保你的 IDE 安装了 ESLint、Prettier、EditorConfig 这三个插件，它们的安装和配置可以参考 <a href="./TypeScript❤ReactNative.md">使用 TypeScript 开发 ReactNative 指南</a></p></blockquote><h3 id="typescript"><a href="#typescript" class="headerlink" title="typescript"></a>typescript</h3><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D typescript @types/react @types/react-native</span><br></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><details><summary>tsconfig.json</summary><br><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"compilerOptions"</span>: &#123;</span><br><span class="line">    <span class="attr">"target"</span>: <span class="string">"esnext"</span>,</span><br><span class="line">    <span class="attr">"module"</span>: <span class="string">"commonjs"</span>,</span><br><span class="line">    <span class="attr">"lib"</span>: [<span class="string">"esnext"</span>],</span><br><span class="line">    <span class="attr">"jsx"</span>: <span class="string">"react"</span>,</span><br><span class="line">    <span class="attr">"declaration"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"declarationMap"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"sourceMap"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"outDir"</span>: <span class="string">"dist"</span>,</span><br><span class="line">    <span class="attr">"strict"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"allowSyntheticDefaultImports"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"esModuleInterop"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"types"</span>: [<span class="string">"react"</span>, <span class="string">"react-native"</span>],</span><br><span class="line">    <span class="attr">"experimentalDecorators"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"emitDecoratorMetadata"</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"exclude"</span>: [<span class="string">"node_modules"</span>, <span class="string">"dist"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><ul><li><code>target</code>: 指定 ECMAScript 目标版本 “ES3”（默认），”ES5”，”ES6”/“ES2015”，”ES2016”，”ES2017”，”ES2018”, “ES2019” 或 “ESNext”。</li><li><code>mode</code>: 指定生成哪个模块系统代码：”None”，”CommonJS”，”AMD”，”System”，”UMD”，”ES6”， “ES2015” 或 “ESNext”。</li><li><code>allowJs</code>: 允许编译 javascript 文件。</li><li><code>checkJs</code>: 在 <code>.js</code> 文件中报告错误。与 <code>--allowJs</code> 配合使用。</li><li><code>jsx</code>: 在 .tsx 文件里支持 JSX： “react”、”react-native”或 “preserve”。查看 <a href="http://t.cn/EK2hSmk" target="_blank" rel="noopener">JSX</a>。</li><li><code>strict</code>: 启用所有严格类型检查选项。启用 <code>--strict</code> 相当于启用 <code>--noImplicitAny</code>, <code>--noImplicitThis</code>, <code>--alwaysStrict</code>， <code>--strictNullChecks</code> 和 <code>--strictFunctionTypes</code> 和<code>--strictPropertyInitialization</code>。</li><li><code>allowSyntheticDefaultImports</code>: 允许从没有设置默认导出的模块中默认导入。这并不影响代码的输出，仅为了类型检查。</li><li><code>esModuleInterop</code>: TypeScript 与 Babel 采取了不同的方案，并且直到现在，还没出现真正地固定标准。 简单地说，如果你使用 Babel，Webpack 或 React Native，并期望与你以往使用地不同的导入行为，TypeScript 提供了该编译选项。</li><li><code>experimentalDecorators</code>: 启用实验性的 ES 装饰器。</li><li><code>给源码里的装饰器声明加上设计类型元数据。</code>: 给源码里的装饰器声明加上设计类型元数据。</li></ul><h3 id="ESLint"><a href="#ESLint" class="headerlink" title="ESLint"></a>ESLint</h3><h4 id="安装依赖-1"><a href="#安装依赖-1" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D eslint eslint-config-airbnb eslint-plugin-jsx-a11y eslint-plugin-import eslint-plugin-react eslint-plugin-react-native @typescript-eslint/parser @typescript-eslint/eslint-plugin eslint-import-resolver-typescript</span><br></pre></td></tr></table></figure><ul><li><a href="https://cn.eslint.org/" target="_blank" rel="noopener">eslint</a>: 可组装的 JavaScript 和 JSX 检查工具</li><li><a href="http://t.cn/RKfLS6c" target="_blank" rel="noopener">eslint-config-airbnb</a>: 该软件包提供 Airbnb 的 <code>.eslintrc</code> 作为可扩展的共享配置</li><li><a href="http://t.cn/R9D22Jm" target="_blank" rel="noopener">eslint-plugin-jsx-a11y</a>: 用于 JSX 元素的可访问性规则的静态 AST 检查器。</li><li><a href="http://t.cn/ESs9ZxL" target="_blank" rel="noopener">eslint-plugin-import</a>: 此插件旨在支持 ES2015 +（ES6 +）导入/导出语法的 linting。</li><li><a href="http://t.cn/R9D22Jm" target="_blank" rel="noopener">eslint-plugin-react</a>: ESLint React 校验规则插件</li><li><a href="http://t.cn/EK2Hf83eslint-plugin-react-native" target="_blank" rel="noopener">eslint-plugin-react-native</a>: 针对 ESLint 的 React Native 特定 linting 规则</li><li><a href="http://t.cn/ESsqPWt" target="_blank" rel="noopener">@typescript-eslint/parser</a>: 将 TypeScript 转换为 ESTree，使 eslint 可以识别</li><li><a href="http://t.cn/ESsVcqc" target="_blank" rel="noopener">@typescript-eslint/eslint-plugin</a>: 一个包含一堆特定于 TypeScript 的 ESLint 规则的插件</li><li><a href="http://t.cn/EK2QgeN" target="_blank" rel="noopener">eslint-import-resolver-typescript</a>: 给 eslint-plugin-import 添加 typescript 支持的插件</li></ul><h4 id="配置文件-1"><a href="#配置文件-1" class="headerlink" title="配置文件"></a>配置文件</h4><details><summary>.eslintignore</summary><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># /node_modules/* and /bower_components/* ignored by default</span><br><span class="line">dist/</span><br></pre></td></tr></table></figure><br><br></details><details><summary>.eslintrc.js</summary><br><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  env: &#123;</span><br><span class="line">    <span class="comment">// 指定脚本的运行环境。每种环境都有一组特定的预定义全局变量</span></span><br><span class="line">    es6: <span class="literal">true</span>,</span><br><span class="line">    node: <span class="literal">true</span>,</span><br><span class="line">    jest: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">'react-native/react-native'</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  extends: [</span><br><span class="line">    <span class="comment">// 一个配置文件可以从基础配置中继承已启用的规则</span></span><br><span class="line">    <span class="string">'airbnb'</span>,</span><br><span class="line">    <span class="string">'plugin:react-native/all'</span>,</span><br><span class="line">    <span class="string">'plugin:@typescript-eslint/recommended'</span>,</span><br><span class="line">    <span class="string">'prettier'</span>,</span><br><span class="line">    <span class="string">'plugin:prettier/recommended'</span>,</span><br><span class="line">    <span class="string">'prettier/react'</span>,</span><br><span class="line">    <span class="string">'prettier/@typescript-eslint'</span>,</span><br><span class="line">  ],</span><br><span class="line">  parser: <span class="string">'@typescript-eslint/parser'</span>, <span class="comment">// 解析器</span></span><br><span class="line">  parserOptions: &#123;</span><br><span class="line">    <span class="comment">// 解析器选项</span></span><br><span class="line">    ecmaFeatures: &#123;</span><br><span class="line">      jsx: <span class="literal">true</span>,</span><br><span class="line">      impliedStrict: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    ecmaVersion: <span class="number">2018</span>,</span><br><span class="line">    project: <span class="string">'./tsconfig.json'</span>,</span><br><span class="line">    sourceType: <span class="string">'module'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  plugins: [</span><br><span class="line">    <span class="comment">// ESLint 支持使用第三方插件。在使用插件之前，你必须使用 npm 安装它。</span></span><br><span class="line">    <span class="string">'react'</span>,</span><br><span class="line">    <span class="string">'react-native'</span>,</span><br><span class="line">  ],</span><br><span class="line">  settings: &#123;</span><br><span class="line">    <span class="comment">// ESLint 支持在配置文件添加共享设置</span></span><br><span class="line">    <span class="string">'import/resolver'</span>: &#123;</span><br><span class="line">      typescript: &#123;&#125;,</span><br><span class="line">      <span class="string">'babel-plugin-root-import'</span>: &#123;</span><br><span class="line">        rootPathSuffix: <span class="string">'src'</span>,</span><br><span class="line">        rootPathPrefix: <span class="string">'~'</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  rules: &#123;</span><br><span class="line">    <span class="comment">// 启用的规则及其各自的错误级别</span></span><br><span class="line">    <span class="string">'global-require'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'linebreak-style'</span>: [<span class="number">2</span>, <span class="string">'unix'</span>],</span><br><span class="line">    <span class="string">'no-console'</span>: [</span><br><span class="line">      <span class="string">'error'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        allow: [<span class="string">'warn'</span>, <span class="string">'error'</span>, <span class="string">'log'</span>, <span class="string">'disableYellowBox'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'no-param-reassign'</span>: [<span class="string">'error'</span>, &#123; <span class="attr">props</span>: <span class="literal">false</span> &#125;],</span><br><span class="line">    <span class="string">'no-restricted-globals'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'no-unused-vars'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'no-use-before-define'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'no-underscore-dangle'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'lines-between-class-members'</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">'always'</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        exceptAfterSingleLine: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'prefer-destructuring'</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        array: <span class="literal">false</span>,</span><br><span class="line">        object: <span class="literal">true</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'react/prefer-stateless-function'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'react/destructuring-assignment'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'react/prop-types'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'react/react-in-jsx-scope'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'react/jsx-filename-extension'</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        extensions: [<span class="string">'.js'</span>, <span class="string">'.jsx'</span>, <span class="string">'.tsx'</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'jsx-a11y/accessible-emoji'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'react-native/no-color-literals'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'react-native/no-raw-text'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'react-native/no-inline-styles'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/explicit-function-return-type'</span>: &#123;</span><br><span class="line">      allowExpressions: <span class="literal">true</span>,</span><br><span class="line">      allowTypedFunctionExpressions: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-explicit-any'</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="string">'@typescript-eslint/no-use-before-define'</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      &#123;</span><br><span class="line">        functions: <span class="literal">true</span>,</span><br><span class="line">        classes: <span class="literal">true</span>,</span><br><span class="line">        variables: <span class="literal">false</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    <span class="string">'@typescript-eslint/no-unused-vars'</span>: [<span class="number">1</span>, &#123; <span class="attr">args</span>: <span class="string">'none'</span> &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br></details><h3 id="Prettier"><a href="#Prettier" class="headerlink" title="Prettier"></a>Prettier</h3><h4 id="安装依赖-2"><a href="#安装依赖-2" class="headerlink" title="安装依赖"></a>安装依赖</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add -D prettier eslint-config-prettier eslint-plugin-prettier</span><br></pre></td></tr></table></figure><ul><li><a href="http://t.cn/R1kvfYq" target="_blank" rel="noopener">prettier</a>: 主 prettier 库</li><li><a href="http://t.cn/ESsWd0H" target="_blank" rel="noopener">eslint-config-prettier</a>: 关闭所有不必要或可能与 prettier 的规则冲突的 ESLint 规则。</li><li><a href="http://t.cn/ESslahh" target="_blank" rel="noopener">eslint-plugin-prettier</a>: 以 ESLint 插件的形式运行 prettier</li></ul><h4 id="配置文件-2"><a href="#配置文件-2" class="headerlink" title="配置文件"></a>配置文件</h4><h5 id="prettierrc-js"><a href="#prettierrc-js" class="headerlink" title=".prettierrc.js"></a>.prettierrc.js</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">(module.exports = &#123;</span><br><span class="line">  "semi": false, // 行位是否使用分号，默认为true</span><br><span class="line">  "trailingComma": "es5", // 是否使用尾逗号，有三个可选值"&lt;none|es5|all&gt;"</span><br><span class="line">  "singleQuote": true, // 字符串是否使用单引号，默认为false，使用双引号</span><br><span class="line">  "printWidth": 120, // 一行的字符数，如果超过会进行换行，默认为80</span><br><span class="line">  "tabWidth": 2, // 一个tab代表几个空格数</span><br><span class="line">  "bracketSpacing": true // 对象大括号直接是否有空格，默认为true，效果：&#123; foo: bar &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h5 id="prettierignore"><a href="#prettierignore" class="headerlink" title=".prettierignore"></a>.prettierignore</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">**/node_modules/*</span><br><span class="line">dist/</span><br></pre></td></tr></table></figure><h3 id="EditorConfig"><a href="#EditorConfig" class="headerlink" title="EditorConfig"></a>EditorConfig</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"># EditorConfig is awesome: http://EditorConfig.org</span><br><span class="line"></span><br><span class="line"># top-most EditorConfig file</span><br><span class="line">root = true</span><br><span class="line"></span><br><span class="line"># Unix-style newlines with a newline ending every file</span><br><span class="line">[*]</span><br><span class="line">indent_style = space</span><br><span class="line">indent_size = 2</span><br><span class="line">end_of_line = lf</span><br><span class="line">charset = utf-8</span><br><span class="line">trim_trailing_whitespace = true</span><br><span class="line">insert_final_newline = true</span><br><span class="line"></span><br><span class="line">[*.md]</span><br><span class="line">trim_trailing_whitespace = false</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> React Native </category>
          
          <category> TypeScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESLint </tag>
            
            <tag> Prettier </tag>
            
            <tag> EditorConfig </tag>
            
            <tag> airbnb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo</title>
      <link href="/hello-hexo/"/>
      <url>/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>Hexo 是一款基于 Node.js 的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在 GitHub 和 Heroku 上，是搭建博客的首选框架。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-cli -g</span><br><span class="line">$ hexo init blog</span><br><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ yarn install</span><br><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><h2 id="基本配置"><a href="#基本配置" class="headerlink" title="基本配置"></a>基本配置</h2><blockquote><p>参考 <a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">Hexo 配置</a>进行配置</p></blockquote><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yarn add hexo-generator-baidu-sitemap hexo-generator-sitemap hexo-generator-feed hexo-generator-search</span><br></pre></td></tr></table></figure><ul><li><a href="http://t.cn/ECw5CzA" target="_blank" rel="noopener">hexo-generator-baidu-sitemap</a>: 使用站图的初衷是为自己的博客添加站内搜索,如果想更好的发挥站图的作用，建议手动提交 baidusitemap 给百度。</li><li><a href="http://t.cn/ECw6ACh" target="_blank" rel="noopener">hexo-generator-sitemap</a>: A plugin to generate search data for Hexo.</li><li><a href="http://t.cn/8s7Dxir" target="_blank" rel="noopener">hexo-generator-feed</a>: 生成 Rss 文件</li><li><a href="http://t.cn/ECw6va8" target="_blank" rel="noopener">hexo-generator-search</a>: Sitemap generator for Hexo.</li></ul><h2 id="主题"><a href="#主题" class="headerlink" title="主题"></a>主题</h2><ul><li><a href="http://t.cn/ECwXxAc" target="_blank" rel="noopener">hexo-theme-melody</a>: 一个为 Hexo 打造的简洁、漂亮、快速的主题</li><li><a href="http://t.cn/R8My58O" target="_blank" rel="noopener">hexo-theme-diaspora</a>: 一款基于 WP 移植的 Hexo 主题，适合喜欢摄影，影评，乐评和玩弄文字的你，干净，清新； 响应式，Ajax，更多好玩的等你来发现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Hello World </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
